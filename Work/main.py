import logging
from datetime import datetime
from pathlib import Path
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)


from Scripts.user_func import (
    analys_based_on_trading_pair_timeframe_numbers_candles,
    analys_based_on_trading_pair_timeframe_start_end,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename='bot_errors.log'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    SELECT_ANALYSIS_TYPE,  # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
    SELECT_TRADE_TYPE,     # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    INPUT_TRADE_PAIR,      # –í–≤–æ–¥ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    INPUT_TIMEFRAME,       # –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    INPUT_CANDLES_COUNT,   # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–µ—á–µ–π
    INPUT_START_TIME,      # –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    INPUT_END_TIME,        # –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
) = range(7)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã (–≤ –º–∏–Ω—É—Ç–∞—Ö)
TIMEFRAMES = ["1", "3", "5", "15", "30", "60"]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
analysis_keyboard = [
    [InlineKeyboardButton("–ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π", callback_data="last_candles")],
    [InlineKeyboardButton("–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏", callback_data="time_range")]
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
trade_type_keyboard = [
    [InlineKeyboardButton("SPOT", callback_data="SPOT")],
    [InlineKeyboardButton("FUTURES", callback_data="FUTURES")],
    [InlineKeyboardButton("PERPETUAL FUTURES", callback_data="PERPETUAL FUTURES")]
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (—Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏)
timeframe_keyboard = [
    [InlineKeyboardButton(tf, callback_data=tf) for tf in TIMEFRAMES[i:i+2]] 
    for i in range(0, len(TIMEFRAMES), 2)
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –∞–Ω–∞–ª–∏–∑–∞."""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=InlineKeyboardMarkup(analysis_keyboard))
    return SELECT_ANALYSIS_TYPE


async def select_analysis_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
    context.user_data["analysis_type"] = query.data
    
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(trade_type_keyboard))
    return SELECT_TRADE_TYPE


async def select_trade_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞."""
    query = update.callback_query
    await query.answer()
    
    trade_type = query.data
    context.user_data["trade_type"] = trade_type
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    if trade_type == "SPOT":
        example = "BTC/USDT"
    elif trade_type == "FUTURES":
        example = "BTC/USDT-25DEC25"
    else:  # PERPETUAL FUTURES
        example = "BTC/USDT"
    
    await query.edit_message_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É ({trade_type}):\n–ü—Ä–∏–º–µ—Ä: {example}")
    return INPUT_TRADE_PAIR


async def input_trade_pair(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É."""
    trade_pair = update.message.text.strip().upper()
    trade_type = context.user_data["trade_type"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä—ã
    if "/" not in trade_pair:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ / –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return INPUT_TRADE_PAIR
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    base, quote = trade_pair.split("/", 1)
    if trade_type == "FUTURES" and "-" not in quote:
        await update.message.reply_text(
            "‚ùå –î–ª—è FUTURES —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC/USDT-25DEC25):")
        return INPUT_TRADE_PAIR
    elif trade_type != "FUTURES" and "-" in quote:
        await update.message.reply_text(
            "‚ùå –î–ª—è SPOT/PERPETUAL –Ω–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return INPUT_TRADE_PAIR
    
    context.user_data["trade_pair"] = trade_pair
    
    # –ó–∞–ø—Ä–æ—Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
        reply_markup=InlineKeyboardMarkup(timeframe_keyboard))
    return INPUT_TIMEFRAME


async def input_timeframe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ."""
    query = update.callback_query
    await query.answer()
    
    context.user_data["timeframe"] = query.data
    
    # –í–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –∞–Ω–∞–ª–∏–∑–∞
    if context.user_data["analysis_type"] == "last_candles":
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (1-1000):")
        return INPUT_CANDLES_COUNT
    else:
        await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
        return INPUT_START_TIME


async def input_candles_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π."""
    try:
        count = int(update.message.text.strip())
        if not 1 <= count <= 1000:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000:")
        return INPUT_CANDLES_COUNT
    
    context.user_data["candles_count"] = count
    await run_analysis(update, context)
    return ConversationHandler.END


async def input_start_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞."""
    try:
        datetime.strptime(update.message.text.strip(), "%d.%m.%Y %H:%M")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")
        return INPUT_START_TIME
    
    context.user_data["start_time"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
    return INPUT_END_TIME


async def input_end_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑."""
    try:
        end = datetime.strptime(update.message.text.strip(), "%d.%m.%Y %H:%M")
        start = datetime.strptime(context.user_data["start_time"], "%d.%m.%Y %H:%M")
        if end <= start:
            raise ValueError
    except ValueError:
        await update.message.reply_text(
            "‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return INPUT_END_TIME
    
    context.user_data["end_time"] = update.message.text.strip()
    await run_analysis(update, context)
    return ConversationHandler.END


async def run_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_data = context.user_data
    chat_id = update.effective_chat.id
    
    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await context.bot.send_message(chat_id, "‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂...")
        
        # –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ç–∏–ø—É
        if user_data["analysis_type"] == "last_candles":
            result = analys_based_on_trading_pair_timeframe_numbers_candles(
                user_data["trade_pair"],
                user_data["trade_type"],
                user_data["timeframe"],
                str(user_data["candles_count"]))
        else:
            result = analys_based_on_trading_pair_timeframe_start_end(
                user_data["trade_pair"],
                user_data["trade_type"],
                user_data["timeframe"],
                user_data["start_time"],
                user_data["end_time"])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not result:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # –ü–æ–¥–ø–∏—Å–∏ –∫ –≥—Ä–∞—Ñ–∏–∫–∞–º
        captions = {
            "volume_plot.png": "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤",
            "obv_plot.png": "üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä OBV", 
            "vwap_comparison.png": "üìâ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ VWAP",
            "volume_pie_BTC-USDT.png": "üî¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤",
            "volume_profile_comparison.png": "üìå –û–±—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        for img in result:
            if img and Path(img).exists():
                with open(img, 'rb') as photo:
                    caption = captions.get(Path(img).name, "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
                    await context.bot.send_photo(chat_id, photo, caption=caption)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        await context.bot.send_message(
            chat_id,
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"–ü–∞—Ä–∞: {user_data['trade_pair']}\n" 
            f"–¢–∏–ø: {user_data['trade_type']}\n"
            f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {user_data['timeframe']}m"
        )
    
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: "
        if "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in str(e):
            error_msg += "–Ω–µ–≤–µ—Ä–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞"
        elif "Cannot cut empty array" in str(e):
            error_msg += "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
        else:
            error_msg += str(e)
        
        await context.bot.send_message(chat_id, error_msg)
        logger.error(f"Analysis error: {str(e)}")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é."""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ /start")
    return ConversationHandler.END


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ config.json (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
    config_path = Path("config.json")
    
    if not config_path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ JSON
    with open(config_path, "r", encoding="utf-8") as f:
        config = json.load(f)

    bot_token = config.get("BOT_TOKEN")
    if not bot_token:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.json")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    app = ApplicationBuilder().token(bot_token).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_ANALYSIS_TYPE: [CallbackQueryHandler(select_analysis_type)],
            SELECT_TRADE_TYPE: [CallbackQueryHandler(select_trade_type)],
            INPUT_TRADE_PAIR: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_trade_pair)],
            INPUT_TIMEFRAME: [CallbackQueryHandler(input_timeframe)],
            INPUT_CANDLES_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_candles_count)],
            INPUT_START_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_start_time)],
            INPUT_END_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_end_time)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == "__main__":
    main()
